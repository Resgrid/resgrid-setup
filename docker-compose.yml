version: '3.9'

services:
  web:
    image: "resgridllc/resgridwebcore:latest"
    ports:
      - "5151:80"
    env_file:
      - resgrid.env
    restart: always
    networks:
      rgmain:
        ipv4_address: 172.16.193.51
    depends_on:
      - api
      - events
      - db
      - redis
      - rabbitmq
      - worker
      - mongodb
    environment:
      - WAIT_HOSTS=db:1433,redis:6379,rabbitmq:15672,api:80,mongodb:27017
      - WAIT_TIMEOUT=300

  api:
    image: "resgridllc/resgridwebservices:latest"
    ports:
      - "5152:80"
    env_file:
      - resgrid.env
    restart: always
    networks:
      rgmain:
        ipv4_address: 172.16.193.52
    depends_on:
      - events
      - db
      - redis
      - rabbitmq
      - worker
      - mongodb
    environment:
      - WAIT_HOSTS=db:1433,redis:6379,rabbitmq:15672,events:80,mongodb:27017
      - WAIT_TIMEOUT=300

  events:
    image: "resgridllc/resgridwebevents:latest"
    ports:
      - "5153:80"
    env_file:
      - resgrid.env
    restart: always
    networks:
      rgmain:
        ipv4_address: 172.16.193.53
    depends_on:
      - db
      - redis
      - rabbitmq
    environment:
      - WAIT_HOSTS=db:1433,redis:6379,rabbitmq:15672
      - WAIT_AFTER=120
      - WAIT_TIMEOUT=300

  worker:
    image: "resgridllc/resgridworkersconsole:latest"
    env_file:
      - resgrid.env
    restart: always
    networks:
      rgmain:
        ipv4_address: 172.16.193.54
    depends_on:
      - db
      - redis
      - rabbitmq
      - mongodb
    environment:
      - WAIT_HOSTS=db:1433,redis:6379,rabbitmq:15672,mongodb:27017
      - WAIT_AFTER=90
      - WAIT_TIMEOUT=180

  db:
    ports:
      - "1433:1433"
    networks:
      rgmain:
        ipv4_address: 172.16.193.55
    build: ./db
    user: root
    environment:
      - SA_PASSWORD=Resgrid123!!
      - ACCEPT_EULA=Y
      - MSSQL_PID=Express
    volumes:
       - ./docker-data/sql/data:/var/opt/mssql/data
       - ./docker-data/sql/log:/var/opt/mssql/log
       - ./docker-data/sql/backup:/var/opt/mssql/backup

  redis:
    image: "redis:alpine"
    command: redis-server --save 60 1 --loglevel warning
    ports:
     - "6379:6379"
    restart: always
    networks:
      rgmain:
        ipv4_address: 172.16.193.56

  rabbitmq:
    image: rabbitmq:3-management
    environment:
      - RABBITMQ_DEFAULT_USER=resgrid
      - RABBITMQ_DEFAULT_PASS=Resgrid321!
    ports:
      - "5160:15672"
      - "5159:5672"
    restart: always
    networks:
      rgmain:
        ipv4_address: 172.16.193.57

  elk:
    image: sebp/elk
    ports:
      - "5601:5601"
      - "9200:9200"
      - "5044:5044"
    restart: always
    networks:
      rgmain:
        ipv4_address: 172.16.193.58
      
  mongodb:
    image: mongo:4.4.18
    ports:
      - 27017:27017
    restart: always
    networks:
      rgmain:
        ipv4_address: 172.16.193.59
    environment:
      - MONGO_INITDB_DATABASE=resgrid
      - MONGO_INITDB_ROOT_USERNAME=resgridUser
      - MONGO_INITDB_ROOT_PASSWORD=Resgrid123!!
    volumes:
      - ./mongo-entrypoint:/docker-entrypoint-initdb.d
      - ./docker-data/mongo/db:/data/configdb
      - ./docker-data/mongo/configdb:/data/db

  caddy:
    image: caddy:2.0.0-alpine
    restart: always
    env_file:
        - resgrid.env
    ports:
      - 80:80
      - 443:443
    networks:
        rgmain:
          ipv4_address: 172.16.193.60
    volumes:
      - caddy: ./docker-data/caddy/
      - .Caddyfile: ./docker-data/caddy/Caddyfile

networks:
  rgmain:
    ipam:
      driver: default
      config:
        - subnet: 172.16.193.0/24